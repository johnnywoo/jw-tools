#!/bin/bash

# exit on first error
set -e

SELF="jw-git-helper"

usage()
{
cat << EOF
Usage: gh command [args]

Information:
  s       git status
  o       git remote update
  l       List of all branches. Auto-updates remote list.
  i       Show changes in current branch since master.
  dl      Show diff for last commit in the branch.
  lu      Commits from latest branch update (pull or any other).

Receiving:
  b       Switch to a branch, creates it if necessary.
  bm      Switch to master branch. Also pulls the branch from origin.
  g [-r]  Create a local branch from the remote one
          (-r is to rebase the branch to master).
          Will overwrite local branch completely.
  u       git pull --rebase

Work cycle:
  a       git add
  m       git commit
  am      Commit all local changes.
  r       git checkout --
  p [-r]  Push current branch to origin. Use -p to also request a pull on github.
  fp [-r] Push current branch to origin (with --force).

Special cases:
  ok      Add everything and continue rebase.
  ss      git stash
  sp      git stash pop
  rd      Deletes a remote branch.

Workflow-related:
  pr      Opens a pull request creation page in github.
  accept  Merge current branch into master, push master,
          then remove the branch from both servers.
          If a branch is specified, it will be grabbed before accepting.
EOF
}


######## ##     ## ##    ##  ######  ######## ####  #######  ##    ##  ######
##       ##     ## ###   ## ##    ##    ##     ##  ##     ## ###   ## ##    ##
##       ##     ## ####  ## ##          ##     ##  ##     ## ####  ## ##
######   ##     ## ## ## ## ##          ##     ##  ##     ## ## ## ##  ######
##       ##     ## ##  #### ##          ##     ##  ##     ## ##  ####       ##
##       ##     ## ##   ### ##    ##    ##     ##  ##     ## ##   ### ##    ##
##        #######  ##    ##  ######     ##    ####  #######  ##    ##  ######


# exits with an error message
crap() { # error message
	[ "$1" ] && echo "$1" >&2
	exit 1
}

current_branch() {
	git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

guess_remote_branch() { # [branch name | ticket number]
	# no branch given: take current branch
	[ -z "$1" ] && current_branch && return
	# ticket number: try to find a branch for it
	if [[ "$1" =~ ^[0-9]+$ ]]; then
		bs=$(git branch -r --no-color 2>/dev/null | sed -e 's/^ *origin\///' | grep -e '^[^ ]\+$' | grep "_${1}_")
		n=$(echo "$bs" | wc -l)
		if [ $n = "1" ]; then
			echo "$bs"
			return
		fi
	fi
	# nothing is found, returning
	echo "$1"
}

current_project_root() {
	git rev-parse --show-toplevel 2>/dev/null || crap "Not in a git repository"
}

propose_push() { # branch name
	if [ "$1" ] && jw-confirm -n "Do you want to push $1 to origin?"; then
		git push origin "$1"
	fi
}

wait_for_git_lock() {
	pth="$(current_project_root)"
	lockf="$pth/.git/index.lock"
	if [ -e "$lockf" ]; then
		echo "Waiting for other process to release git lock..."
		sleep 1
		# not waiting for too long
		if [ -e "$lockf" ]; then
			rm "$lockf"
		fi
	fi
}

display_status() { # status name regexp color
	x="$(echo "$1" | grep -E "$3" || true)"
	if [ "$x" ]; then
		echo "$2"
		oIFS="$IFS"; IFS=""
		echo "$x" | while read line; do
			f1="${line:0:1}"
			f2="${line:1:1}"
			rest="${line:2}"
			[ "$f1" == "?" ] && f1="" && f2="?$f2"

			printf "% 3d. " "$n"
			echo -ne "\033[32m" # green
			echo -n "$f1"
			echo -ne "\033[31m" # red
			echo -n "$f2"
			echo -ne "\033[$4m" # given color
			echo "$rest"
			echo -ne "\033[0m" # white

			let "n+=1"
		done
		IFS="$oIFS"
	fi
}


######## ####  ######  ##    ## ######## ########    ######## ##     ## ##    ##  ######   ######
   ##     ##  ##    ## ##   ##  ##          ##       ##       ##     ## ###   ## ##    ## ##    ##
   ##     ##  ##       ##  ##   ##          ##       ##       ##     ## ####  ## ##       ##
   ##     ##  ##       #####    ######      ##       ######   ##     ## ## ## ## ##        ######
   ##     ##  ##       ##  ##   ##          ##       ##       ##     ## ##  #### ##             ##
   ##     ##  ##    ## ##   ##  ##          ##       ##       ##     ## ##   ### ##    ## ##    ##
   ##    ####  ######  ##    ## ########    ##       ##        #######  ##    ##  ######   ######

github_pull_request() {
	branch="$(current_branch)"
	repo="$(git remote -v | grep -m 1 "(push)" | sed -e "s/.*github.com[:/]\(.*\)\.git.*/\1/")"
	if [ "$branch" ] && [ "$repo" ]; then
		echo "Opening a pull request github page for $repo"
		open "https://github.com/$repo/pull/new/$branch"
	fi

	issue="$(youtrack_issue_id)"
	if [ "$issue" ]; then
		echo "Setting YouTrack issue $issue to Fixed"
		youtrack-issue-command "$issue" Fixed
	fi
}

youtrack_issue_id() { # ticket
	ticket="$1"
	[ -z "$ticket" ] && ticket="$(current_ticket)"
	[ "$ticket" ] && echo "IS-$ticket"
	# if we didn't find the ticket, it's not an error, so let's return 0
	return 0
}

# cuts first numeric sequence from the input
guess_ticket() { # ticket id or branch name
    # cut is there specially for people with numbers in nicknames
	echo "$1" | cut -f2- -d_ | egrep -o '[0-9]+' | head -n 1
}

# Takes input and converts it into ticket id.
# Grabs current branch name if no/empty args given.
# The script will die if no ticket id is found!
current_ticket() { # [ticket id or branch name]
	str="$1"
	[ -z "$str" ] && str=$(current_branch)
	ticket=$(guess_ticket "$str")
	echo "$ticket"
}




 ######   #######  ##     ## ##     ##    ###    ##    ## ########   ######
##    ## ##     ## ###   ### ###   ###   ## ##   ###   ## ##     ## ##    ##
##       ##     ## #### #### #### ####  ##   ##  ####  ## ##     ## ##
##       ##     ## ## ### ## ## ### ## ##     ## ## ## ## ##     ##  ######
##       ##     ## ##     ## ##     ## ######### ##  #### ##     ##       ##
##    ## ##     ## ##     ## ##     ## ##     ## ##   ### ##     ## ##    ##
 ######   #######  ##     ## ##     ## ##     ## ##    ## ########   ######

# die if no args
[ $# = 0 ] && usage && exit 1

cmd="$1"
shift 1

case "$cmd" in

	#### ##    ## ########  #######
	 ##  ###   ## ##       ##     ##
	 ##  ####  ## ##       ##     ##
	 ##  ## ## ## ######   ##     ##
	 ##  ##  #### ##       ##     ##
	 ##  ##   ### ##       ##     ##
	#### ##    ## ##        #######

	s)
		pth="$(git rev-parse --show-toplevel 2>/dev/null || true)"
		if [ -z "$pth" ]; then
			echo "Not in a git repo!"
			for f in ./*; do
				# cannot use -a here because it evaluates all arguments
				if [ -e "$f/.git" ] && [ "$(cd "$f"; git status --porcelain | wc -l)" != 0 ]; then
					echo "Dirty repo: $f"
				fi
			done
			exit
		fi

		wait_for_git_lock
		status="$(git status --porcelain)"
		n=1
		display_status "$status" 'Staged:'     '^[A-Z]'  32 # green
		display_status "$status" 'Not staged:' '^.[A-Z]' 31 # red
		display_status "$status" 'Untracked:'  '^\?'     31 # red

		# composer repos
		if [ -e composer.json -a "$(composer status --no-ansi)" != 'No local changes' ]; then
			composer status -v
		fi
		;;
	o)
		wait_for_git_lock
		git remote update
		git remote prune origin
		;;
	l)
		wait_for_git_lock
		git remote update >/dev/null
		git remote prune origin
		git branch -a
		;;
	i)
		wait_for_git_lock
		git log -M -C --stat --summary --abbrev-commit  master..
		;;
	dl)
		wait_for_git_lock
		git diff HEAD^..HEAD
		;;
	lu)
		wait_for_git_lock
		branch="$(current_branch)"
		git log --graph "$branch@{1}..$branch"
		;;


	########  ########  ######  ######## #### ##     ## #### ##    ##  ######
	##     ## ##       ##    ## ##        ##  ##     ##  ##  ###   ## ##    ##
	##     ## ##       ##       ##        ##  ##     ##  ##  ####  ## ##
	########  ######   ##       ######    ##  ##     ##  ##  ## ## ## ##   ####
	##   ##   ##       ##       ##        ##   ##   ##   ##  ##  #### ##    ##
	##    ##  ##       ##    ## ##        ##    ## ##    ##  ##   ### ##    ##
	##     ## ########  ######  ######## ####    ###    #### ##    ##  ######

	b)
		wait_for_git_lock
		[ -z "$1" ] && crap "You must specify the branch"
		branch="$1"
		needcreate=""
		git branch --no-color | grep "$branch" >/dev/null || needcreate="-b"
		git checkout $needcreate "$branch"
		git submodule update
		issue="$(youtrack_issue_id)"
		if [ ! -z "$needcreate" -a "$issue" ]; then
			echo "Setting YouTrack issue $issue to In Progress"
			youtrack-issue-command "$issue" "In Progress"
		fi
		;;
	bm)
		wait_for_git_lock
		git rebase --abort &>/dev/null || true
		git checkout master
		$SELF u
		;;
	g|grab)
		wait_for_git_lock
		git remote update > /dev/null
		norebase="yes"
		if [ "$1" = "-r" ]; then
			norebase=""
			shift 1
		fi
		branch=$(guess_remote_branch "$1")
		[ "$branch" == 'master' ] && crap "Cannot grab master"
		[ -z "$branch" ] && crap "You must specify the branch"
		[ -z "$(git branch -r | grep "origin/$branch")" ] && crap "No branch $branch in origin"
		# going to master so we can delete current branch
		git checkout master
		# try to delete the branch;
		# error means there was no branch, it should be ignored
		git branch -D "$branch" 2> /dev/null || true
		echo
		echo "== Checking out $branch"
		git checkout -b "$branch" "origin/$branch"
		if [ -z "$norebase" ]; then
			echo
			echo "== Rebasing to master"
			git rebase master
		fi
		#$SELF sm
		;;
	u)
		wait_for_git_lock

		branch="$(current_branch)"
		if ! git config --get "branch.$branch.remote" &>/dev/null ; then
			git branch --set-upstream-to="origin/$branch" "$branch"
		fi

		git pull --rebase "$@"
		git submodule update --recursive --init

		echo
		echo 'Latest pull summary'
		git log --graph "$branch@{1}..$branch"
		;;


	 ######  ##    ##  ######  ##       ########
	##    ##  ##  ##  ##    ## ##       ##
	##         ####   ##       ##       ##
	##          ##    ##       ##       ######
	##          ##    ##       ##       ##
	##    ##    ##    ##    ## ##       ##
	 ######     ##     ######  ######## ########

	a)
		wait_for_git_lock

		if [ $# = 0 ]; then
			git add -Av .
		else
			git add -Av "$@"
		fi
		$SELF s
		;;
	m)
		wait_for_git_lock
		if [ "$1" ]; then
			git commit -m "$1"
		else
			issue="$(youtrack_issue_id)"
			if [ "$issue" ]; then
				git commit -m "$(youtrack-issue-summary "$issue")" -e
			else
				git commit -e
			fi
		fi
		propose_push $(current_branch)
		;;
	am)
		wait_for_git_lock
		do_the_adding="yes"
		# --quiet removes output and also turns on correct exit codes
		if git diff --staged --quiet; then
			true
		else
			$SELF s
			echo
			jw-confirm -n "Something is already staged, are you sure you want to stage everything else?" || do_the_adding=""
		fi
		[ "$do_the_adding" ] && $SELF a
		$SELF m "$@"
		;;
	r)
		wait_for_git_lock
		if [ $# = 0 ]; then
			git checkout -- .
			git clean -f .
		else
			git checkout -- "$@"
			git clean -f -- "$@"
		fi
		;;
	p)
		wait_for_git_lock
		branch=$(current_branch)
		git push origin "$branch"
		if [ "x-r" = "x$1" ]; then
			github_pull_request
		fi
		;;
	fp)
		wait_for_git_lock
		branch=$(current_branch)
		jw-confirm "Do you really want to force push? Can't be good, you know." || exit 1
		git push --force origin "$branch"
		if [ "x-r" = "x$1" ]; then
			github_pull_request
		fi
		;;


	########     ###    ########  ########
	##     ##   ## ##   ##     ## ##
	##     ##  ##   ##  ##     ## ##
	########  ##     ## ########  ######
	##   ##   ######### ##   ##   ##
	##    ##  ##     ## ##    ##  ##
	##     ## ##     ## ##     ## ########

	ok)
		wait_for_git_lock
		$SELF a
		git rebase --continue
		;;
	ss)
		wait_for_git_lock
		git stash
		;;
	sp)
		wait_for_git_lock
		git stash pop
		;;
	rd)
		wait_for_git_lock
		branch="$1"
		[ -z "$branch" ] && branch=$(current_branch)
		git branch -r | grep "origin/$branch" >/dev/null || crap "No branch $branch in origin"
		git push origin :$branch
		;;

	######## ####  ######  ##    ## ######## ########  ######
	   ##     ##  ##    ## ##   ##  ##          ##    ##    ##
	   ##     ##  ##       ##  ##   ##          ##    ##
	   ##     ##  ##       #####    ######      ##     ######
	   ##     ##  ##       ##  ##   ##          ##          ##
	   ##     ##  ##    ## ##   ##  ##          ##    ##    ##
	   ##    ####  ######  ##    ## ########    ##     ######

	pr)
		wait_for_git_lock
		github_pull_request
		;;

	ac|accept)
		[ "$1" ] && $SELF grab "$1"
		wait_for_git_lock
		branch=$(current_branch)
		echo
		echo "== Current branch is $branch"
		[ "$branch" == "master" ] && crap
		jw-confirm "Do you wish to merge this branch into master and then delete the branch?" || exit 0
		echo
		echo "== Switching to master"
		git checkout master
		echo
		echo "== Merging $branch into master"
		git merge --no-ff "$branch"
		echo
		echo "== Pushing master"
		git push origin master
		echo
		echo "== Removing local branch $branch"
		git branch -D "$branch"
		if git branch -r | grep "origin/$branch" >/dev/null; then
			echo
			echo "== Removing remote branch $branch"
			git push origin :$branch
		fi

		ticket="$(guess_ticket)"
		[ "$ticket" ] && issue="$(youtrack_issue_id $ticket)" || issue=""
		if [ "$issue" ]; then
			echo
			echo "== Setting YouTrack issue $issue to Verified"
			youtrack-issue-command "$issue" Verified
		fi
		;;

	*)
		echo "Unrecognized command: $cmd" >&2
		jw-confirm "Do you want to run that with git?" || exit 1
		git "$cmd" "$@"
		;;
esac
