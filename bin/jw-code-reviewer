#!/usr/local/php/bin/php
<?

//
// Code review helper script
// See `gh` for explanations on how to work with reviews.
//

$home = dirname(__FILE__).'/../sites';

$fname = $home.'/code-review.db';

$trac_cmd = "ssh www@ibm.loc /home/www/trac";

$projects = array(
	'att.ocg.ru',
	'lib_php',
	'system',
);

$db = new Review_Db($fname);


switch(empty($argv[1]) ? '' : $argv[1])
{
	case 'remove':
		$b = arg(2, 'No branch specified');
		$db->remove($b);
		exit;

	case 'set':
		$b = arg(2, 'No branch specified');
		$text = arg(3);
		$db->set($b, $text);
		exit;
}



function arg($n, $error = '')
{
	global $argv;
	if(empty($argv[$n]) && $error) crap($error);
	return empty($argv[$n]) ? '' : $argv[$n];
}

function crap($s = '')
{
	if($s) file_put_contents('php://stderr', $s."\n");
	exit(1);
}

class Review_Db
{
	private $file = '';
	public function __construct($file)
	{
		$this->file = $file;
	}

	public function get($branch)
	{
		$this->load();

		return @$this->data[$branch];
	}

	public function set($branch, $text)
	{
		$this->load();

		$x =& $this->data[$branch];
		if(!isset($x)) $x = array('text' => '');

		$x['date'] = time();
		if($text) $x['text'] = $text;

		$this->save();
	}

	public function remove($branch)
	{
		$this->load();
		unset($this->data[$branch]);
		$this->save();
	}

	private $data = false;
	private function load()
	{
		if(is_array($this->data)) return;
		if(!file_exists($this->file)) $this->data = array();
		else $this->data = unserialize(file_get_contents($this->file));
	}

	private function save()
	{
		file_put_contents($this->file, serialize($this->data));
	}
}




function paint($s, $color = 'n')
{
	return Console_Color::convert("%$color$s%n");
}

$branches = array();
$tickets_map = array();
foreach($projects as $proj)
{
	$path = $home.'/'.$proj;
	`cd $path && git remote update`;
	$list = `cd $path && git branch -r`;
	$branches[$proj] = array();
	foreach(explode("\n", $list) as $line)
	{
		if(!preg_match('#^\s*origin/(\S+)#', $line, $m)) continue;
		$branch = $m[1];
		if(in_array($branch, array('HEAD', 'master'))) continue;

		$ticket = '';
		if(preg_match('/^[^_]+_(\d+)/', $branch, $m))
		{
			$ticket = $m[1];
			$tickets_map[$ticket] = true;
		}

		$commit_time = trim(`cd $path && git log --format="%at" origin/$branch | head -n 1`);

		$branches[$proj][] = array(
			'branch'      => $branch,
			'commit_time' => $commit_time,
			'ticket'      => $ticket,
		);
	}
}

// getting ticket change times
$ticket_times = array();
// array_keys($tickets_map)
function get_ticket_times($tickets)
{
	$ticket_times = array();
	$cmd = $trac_cmd.' times '.join(' ', $tickets);
	$list = `$cmd`;
	foreach(explode("\n", $list) as $line)
	{
		if(!preg_match('/^(\d+)\s(\d+)\s*$/', $line, $m)) continue;
		$ticket_times[$m[1]] = $m[2];
	}
	return $ticket_times;
}

echo 'Legend: '.paint('reviewed', 'y').', '.paint('not reviewed', 'r').".\n\n";

foreach($branches as $proj=>$list)
{
	if(empty($list)) continue;

	echo "$proj\n";
//	if(empty($list)) echo paint("no branches", 'g')."\n";

	$lines = array();
	foreach($list as $branch)
	{
		$color = 'r';
		$time = $branch['commit_time'];
		$t = '';

		$x = $db->get($proj.'/'.$branch['branch']);
		$review_time = @$x['date'];
		if($review_time)
		{
			if($review_time > $time) $color = "y";
			$time = max($review_time, $time);
			$t = ', seen '.dt($review_time);
			if($x['text'] != '') $t .= "\n       ".$x['text'];
			else $t .= "\n       -";
		}
		else $t = "\n       -";
		$lines[$time.' '.$branch['branch']] =
			paint(/*str_pad(*/$branch['branch']/*, 47, ' ')*/, $color)
			." ".dt($branch['commit_time']).$t."\n";
	}
	ksort($lines);
	$i = 0;
	foreach($lines as $line)
	{
		echo sprintf('% 2d', ++$i).'. '.$line;
	}
	echo "\n";
}

function dt($date)
{
	if(date('d.m.Y', $date) != date('d.m.Y')) return date('d M', $date);
	return date('H:i', $date);
}

?>